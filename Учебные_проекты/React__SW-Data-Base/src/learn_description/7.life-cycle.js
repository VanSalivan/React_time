//?63. Зачем компонентам "жизненный цикл"?
//* - Компонентам нужно выполнять код в определенные моменты своей жизни
//* - К примеру, перед тем как компонент будет удален, необходимо очистить ресурсы
//* - В React для этого есть механизм - методы жизненного цикла 

//? 64. Методы жизненного цикла
//* - componentDidMount - компонент "Подключен" (DOM элементов уже на странице)
//* - componentDidUpdate - компонент обновился
//* - componentWillUnmount - компонент будет удален(но DOM еще на странице)
//* - componentDidCatch - когда в компоненте (или в его child компонентах) произошла ошибка

//? 65. componentDidMount()
//* - componentDidMount - вызвает метод когда мы уверенны в том что DOM построен
//* - Используется для инициализации: получение данных, работа с DOM и т.д
//* - Не используйте конструктор для кода, который создает побочные эффекты

//? 66. Используем на практике componentDidMount()
//* - componentDidMount - хорошее место, для того, чтобы получать данные

//? 67. componentDidUpdate()
//* - componentDidUpdate - вызывается после того, как компонент обновился
//* - Компонент обновляется после того, как получил новые свойства(new props) или state
//* - Этот метод вызывается после render() - в нем можно, к примеру, запрашивашивать новые данные для обновленных свойств

//? 68. Используем на практике componentDidUpdate()
//* - Использовали componentDidUpdate() чтобы подгрузить новые данные, когда personId изменился
//* - Если будем использовать смену props || state необходимо условие проверки чтобы не создать петлю

//* Если ("ID из пропса" не такой же как "ID предыдущего пропса")
// if (this.props.personId !== prevProps.personId) {
//     this.updatePerson();
// }

//* - Иначе  компонент рускует уйти в "вечный цикл" обновления
// SetState =>  componentDidUpdate => SetState =>  componentDidUpdate = БЕСКОНЕЧНОСТЬ

//? 69. componentWillUnmount()
//* - componentWillUnmount - компонент будет удален
//* - Используется для очистки ресурсов (таймеры, интервалы, запросы к серверу)
//* - В момент вызова метода DOM все еще находится на странице

//? 70. componentDidCatch()
//* - componentDidCatch - отлавливает ошибки которые произошли в методах жизненного цикла ниже по иерархии
//* - Принцип работы похож на try/catch - ошибку отлавливает ближайший блок
//* - Не отлавливает ошибки в слушателях событий и асинхронном коде(запросы к серверу и т.п)
//* Схож в работе с пожарными шлюзами на космической станции - при пожаре изолирует/крашит только блок в его поле видимости

//? 71. Используем componentDidCatch() на практике
//* - Чтобы определить границы ошибок, нужны компоненты/обертки, которые будут разделять независимые блоки приложения
//* - componentDidCatch принимает два агрумент (error, info) 
//* - error - ошибка которая привела к тому что этот метод сработал
//* - info - детали/расположение компонента в котором произошла ошибка