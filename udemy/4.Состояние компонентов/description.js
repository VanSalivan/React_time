//? 30. Массивы, как свойства компонентов
//* - Массивы можно передавать как свойство
//* - В JSX можно вставлять массивы элементов(не только по одному)
//* - Можно передать ВСЕ свойства обьекта в компонент используя Object Spread(...array) не перечисляя каждого

//? 31. Коллекции и ключи
//* - Каждому JSX элементу в массиве нужно уникальное свойство "key"
//* - React использует "key" чтобы эффективно сравнивать элементы  при обновлении
//* - Не стоит делать ключи из индекса массива

//? 34. Компоненты-классы
//* - Классы используются, когда нужно хранить состояние
//* - Классы наследуют React.Component
//* - Метод "render()" возвращает элемент (как в функциональном компоненте)
//* - "props" доступны через "this.props"

//? 35. Обработка событий
//* - Добавить свойство "onClick" или любой другой event "addEventListener" к элементу
//* - Передать функцию "onClick"={функция}
//* - Убедиться, что "this" сохранит правильное значение внутри функции
//* 1) Функция стрелка => в конструкторе или на полях класса
//* 2) Bind контекста <span onClick={this.функция-Передаваемая-В-Эвент.bind(this)}> создавая новую функцию

//? 36. State - состояние React компонента
//* - Состояние компонента хранится в поле "state"
//* - "this.state" инициализируется в конструкторе или теле класса
//* - После инициализации "state" нельзя изменять (только читать)
//* - Чтобы обновить "state" - "setState()" 

//? 37. Как работает setState()
//* - В "setState()" нужно передавать только ИЗМЕНЕНИЯ в "state"

//? 38. Обновление состояние, зависящее от предыдущего состояния
//* - "setState()" принимает функцию у которой агрумент - текущий state 
//* - Пример: 
// onLabelClick = () => {
//     this.setState((state) => {
//         return {
//             done: !state.done
//         }
//     })
// }

//? 39. Собственные события
//* - Любой компонент может генерировать собственные события (onИмяФункции)
//* - Достаточно передать callback функцию, как property, а затем вызвать ее из компонента, когда наступило событие
//* - Через события, данные поднимаются ВВЕРХ по иерархии компонентов


//? 
//* - 
//* - 
//* - 

//? 
//* - 
//* - 
//* - 