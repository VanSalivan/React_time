//? 95. Что такое React Hooks (хуки)
//* - Хуки дают возможность компонентам-функциям работать со состоянием, жизненным циклом и контекстом.
//* - Работаю в версии React не ниже 16.8.0

//? 97. useState()
//* - Добавляет state в функциональный компонент
// const [ параметр, setПараметр ] = useState(стартовое_Значение)
//* - Возвращает массив: текущее значение и функция(setter) для установки значения
//* - Всегда обновляет обьект полностью, а не отдельные поля как setState()

//? 98. useContext()
//* - Получает значение из заданого контекста
// const a = useContext(КомпонентКонтекст);
//* - В useContext() передается именно обьект-контекст, а не Consumer

//? 99.useEffect()
//* - Эффекты создаются и очищаются когда изменяются данные от которым этот эффект зависит
//* - Схож с функциями жизненных циклов компонента
//* - Принимает вторым параметром условия обновления для эффекта componentDidUpdate
// useEffect(первый_параметр_функция, [второй-условие в виде массива]) componentDidMount
//* - Если передать вторым агрументом пустой массив [ ] будет работать лишь если вернуть "return" функцию
//* - Она будет вызываться для очистки предыдущего эффекта - похоже на componentWillUnmount()

//? 101. Использование useEffect() для загрузки данных
//* - Если данные зависят от параметра(например от ID ресурса) - обязательно укажите его в массиве
//* - Promise нельзя отменить, но можно проигнорировать результаты
// useEffect(() => {
//     let cancelled = false; // флаг отвечающий за игнорирование результата промиса
//     fetch(`https://swapi.dev/api/planets/${props.id}`)
//         .then(res => res.json())
//         .then(data => !cancelled && setName(data.name))
//     return () => cancelled = true;
// }, [props.id]);

//? 102. Создание собственных хуков
//* - Собственные хуки - любая функция которая начинается на useИмяХука и может использовать другие хуки
// const useИмяКастомногоХука = (ID) => {
//     const [name, setName] = useState(null);

//     useEffect(() => {
//         let cancelled = false; // флаг отвечающий за игнорирование результата промиса
//         fetch(`https://swapi.dev/api/planets/${ID}`)
//             .then(res => res.json())
//             .then(data => !cancelled && setName(data.name))
//         return () => cancelled = true;
//     }, [ID]);

//     return name;
// };


//? 
//* - 
//* - 
//* - 

//? 
//* - 
//* - 
//* - 

//? 
//* - 
//* - 
//* - 